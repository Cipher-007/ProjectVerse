generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String
  lastName  String

  email    String   @unique
  password String
  contact  String   @unique
  role     UserRole @default(DEVELOPER)

  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String?

  theme Theme @default(dark)

  comments    Comment[]
  permissions Permission[]

  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  Request        Request[]
}

model Organization {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String @unique
  email   String @unique
  contact String @unique

  employees User[]
  teams     Team[]

  projects Project[]
  tasks    Task[]
  Request  Request[]
}

model Team {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String @unique
  description String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  projects Project[]
  tasks    Task[]
  members  User[]
}

model Request {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String        @unique
  status         RequestStatus @default(PENDING)
}

model Project {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String   @unique
  description String
  priority    Priority @default(NORMAL)

  deleted Boolean @default(false)

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  tasks Task[]

  comments Comment[]

  startDate DateTime
  endDate   DateTime

  permissions Permission[]
}

model Task {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String

  startDate DateTime
  endDate   DateTime

  deleted Boolean @default(false)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  status   TASK_STATUS @default(TODO)
  priority Priority    @default(NORMAL)

  permissions Permission[]

  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  Team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  content     String
  permissions Permission[]

  @@index([projectId])
}

model Permission {
  id   String         @id @default(uuid())
  type PermissionType @default(NONE)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  task   Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String?

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?

  @@index([userId, projectId, taskId, commentId])
}

enum PermissionType {
  ALL
  READ
  WRITE
  MODIFY
  DELETE
  NONE
}

enum UserRole {
  ORGANIZATION_ADMIN
  TEAM_LEAD
  PRODUCT_OWNER
  PROJECT_MANAGER
  DEVELOPER
  FRONTEND_DEVELOPER
  BACKEND_DEVELOPER
  FULL_STACK_DEVELOPER
  QA_TESTER
  DEVOPS_ENGINEER
  DESIGNER
}

enum TASK_STATUS {
  TODO
  IN_PROGRESS
  ON_HOLD
  DONE
  CANCELED
  BACKLOG
}

enum Priority {
  HIGH
  NORMAL
  LOW
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Theme {
  dark
  light
}
